buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.7.2'
    }
}

apply plugin: 'com.android.library'

def stdout = new ByteArrayOutputStream()
exec {
    commandLine 'git', 'describe', '--tags', '--always'
    standardOutput = stdout
}
def versionName = stdout.toString().trim()

allprojects {
    setVersion versionName
    setGroup 'info.guardianproject.panic'
    
    repositories {
        google()
        mavenCentral()
    }
}

android {
    namespace 'info.guardianproject.panic'
    compileSdk 34
    buildToolsVersion '34.0.0'
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    
    defaultConfig {
        minSdk 21
        targetSdk 34
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    lint {
        htmlReport true
        xmlReport false
        textReport false
        abortOnError false
        checkReleaseBuilds false
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompileProvider, sourcesJar, javadocJar
    task.from variant.javaCompileProvider.get().destinationDirectory
    task.exclude('info/guardianproject/**/BuildConfig.**')
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.addStringOption('notimestamp')
    options.addStringOption('Xdoclint:none', '-quiet')
    failOnError false
    enabled = false  // Disable javadoc for now
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'info.guardianproject.panic'
            artifactId = 'panic'
            version = project.version
            
            artifact sourcesJar
            artifact javadocJar
            
            pom {
                name = 'PanicKit'
                description = 'PanicKit is a collection of tools for letting panic trigger and panic receiver apps safely and easily connect to each other. The trigger apps are the part that the user will actual engage when in a panic situation. The receiver apps receive the trigger signal from the trigger apps when the user has initiated the panic response. The connections between trigger and receiver can be strictly enforced based on Package Name and APK signing key.'
                url = 'https://github.com/guardianproject/PanicKit'
                
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, version 2.1 or newer (LGPLv2.1+)'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html'
                    }
                }
                
                scm {
                    connection = 'scm:https://github.com/guardianproject/PanicKit.git'
                    developerConnection = 'scm:git@github.com:guardianproject/PanicKit.git'
                    url = 'https://github.com/guardianproject/PanicKit'
                }
            }
        }
    }
}
